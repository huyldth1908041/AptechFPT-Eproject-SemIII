@model VehicleShowRoomManager.Models.Vehicle

@{
    ViewBag.Title = "CreateVehicle";


    List<VehicleShowRoomManager.Models.VehicleModel> listModels = ViewBag.Models as List<VehicleShowRoomManager.Models.VehicleModel>;
    var modelSelectList = new SelectList(listModels, "Id", "ModelNumber", 1);


    List<VehicleShowRoomManager.Models.Brand> listBrands = ViewBag.Brands as List<VehicleShowRoomManager.Models.Brand>;
    var BrandSelectList = new SelectList(listBrands, "Id", "Name", 1);
}

<h2>CREATE VEHICLE</h2>


<div class="card">
    <div class="card-body">
        <form action="@Url.Action("CreateVehicle", "ShowRoom")" method="post" id="create-vehicle-form">
            @Html.AntiForgeryToken()

            <div class="form-horizontal">
                <h4>Vehicle Information</h4>
                <hr />
                @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                <div class="form-row container">
                    <div class="form-group col-md-5">
                        <label for="Brand" class="control-label">Brand </label>
                        <select class="form-control" id="brand-select">

                            @foreach (var item in listBrands)
                            {
                                <option value="@item.Id">@item.Name</option>
                            }
                        </select>
                    </div>

                    <div class="form-group col-md-5">
                        <label for="VehicleModelId" class="control-label">Model Number </label>
                        <select class="form-control" id="VehicleModelId" name="VehicleModelId">

                            <!--update by js-->
                        </select>
                    </div>
                </div>

                <div class="form-row container">
                    <div class="form-group col-md-5">
                        @Html.LabelFor(model => model.Type, htmlAttributes: new { @class = "control-label" })
                        <div>
                            @Html.EnumDropDownListFor(model => model.Type, htmlAttributes: new { @class = "form-control" })
                            @Html.ValidationMessageFor(model => model.Type, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="form-group col-md-5">
                        @Html.LabelFor(model => model.Control, htmlAttributes: new { @class = "control-label" })
                        <div>
                            @Html.EnumDropDownListFor(model => model.Control, htmlAttributes: new { @class = "form-control" })
                            @Html.ValidationMessageFor(model => model.Control, "", new { @class = "text-danger" })
                        </div>
                    </div>
                </div>

                <div class="form-row container">
                    <div class="form-group col-md-5">
                        @Html.LabelFor(model => model.Name, htmlAttributes: new { @class = "control-label" })
                        <div>
                            @Html.EditorFor(model => model.Name, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.Name, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="form-group col-md-5">
                        @Html.LabelFor(model => model.Color, htmlAttributes: new { @class = "control-label" })
                        <div>
                            @Html.EditorFor(model => model.Color, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.Color, "", new { @class = "text-danger" })
                        </div>
                    </div>
                </div>





                <div class="form-group">
                    @Html.LabelFor(model => model.Cover, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="field item form-group">

                        <div>
                            <button type="button" id="upload_widget" class="btn btn-secondary" style="margin-left: 10px ">
                                Click to upload
                            </button>
                        </div>
                        <div class="col-md-6 col-sm-6 mt-2 cover">

                        </div>
                    </div>
                </div>





                <div class="form-group">
                    @Html.LabelFor(model => model.SalePrice, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.SalePrice, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.SalePrice, "", new { @class = "text-danger" })
                    </div>
                </div>



                <div class="form-group">
                    @Html.LabelFor(model => model.Description, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.TextAreaFor(model => model.Description, new { @class = "form-control" })
                        @Html.ValidationMessageFor(model => model.Description, "", new { @class = "text-danger" })
                    </div>
                </div>





                <div class="form-group">
                    <div class="col-md-offset-2 col-md-10">
                        <input type="submit" value="Create" class="btn btn-default" />
                    </div>
                </div>
            </div>
        </form>
    </div>
</div>



<div>
    @Html.ActionLink("Back to List", "Index")
</div>

@section pageScripts {
    @Scripts.Render("~/bundles/jqueryval")
    <script>
        const brandSelectBox = document.getElementById("brand-select");
        const modelSelectBox = document.getElementById("VehicleModelId");
        $(function () {
            const id = brandSelectBox.value;

            $.ajax({
                url: "/ShowRoom/ListModelsByBrands/".concat(id),
                type: "GET",


                traditional: true,
                dataType: "html",
                success: function (data) {
                    updateModelSelectBox(data);
                },
                error: function () {
                    alert("An error has occured!!!");
                }
            });
        });

        brandSelectBox.addEventListener("change", e => {
            const id = e.target.value;

            $.ajax({
                url: "/ShowRoom/ListModelsByBrands/".concat(id),
                type: "GET",


                traditional: true,
                dataType: "html",
                success: function (data) {
                    updateModelSelectBox(data);
                },
                error: function () {
                    alert("An error has occured!!!");
                }
            });

        });

        function updateModelSelectBox(data) {

            modelSelectBox.innerHTML = "";
            modelSelectBox.innerHTML = data;
        }
    </script>

    <script src="https://widget.cloudinary.com/v2.0/global/all.js" type="text/javascript"></script>

    <script type="text/javascript">
        document.addEventListener('DOMContentLoaded', function () {
            var myWidget = cloudinary.createUploadWidget({
                cloudName: 'thaianh284',
                uploadPreset: 'diucrcip',
                multiple: false,
                form: '#create-vehicle-form',
                fieldName: 'Covers',
                thumbnails: '.cover',
                cropping: true,


            }, (error, result) => {
                if (!error && result && result.event === "success") {
                    var inputValues = document.querySelectorAll('input[name="Covers"]');
                    for (let i = 0; i < inputValues.length; i++) {
                        inputValues[i].value = inputValues[i].getAttribute('data-cloudinary-public-id')
                    }
                }
            }
            )
            document.getElementById("upload_widget").addEventListener("click", function () {
                myWidget.open();
            }, false);



            $('body').on('click', '.cloudinary-delete', function () {
                var splittedImg = $(this).parent().find('img').attr('src').split('/');
                var imgName = splittedImg[splittedImg.length - 1];
                var splittedImgName = imgName.split('.');
                var imgCode = splittedImgName[0];
                $('input[data-cloudinary-public-id="' + imgCode + '"]').remove();
            });
        })

    </script>

    @*Add path file ckeditor.js to view*@
    <script src="~/Content/ckeditor5-build-classic/ckeditor.js"></script>

    @*Change edit description to ckeditor form*@
    <script>
        ClassicEditor
            .create(document.querySelector('#Description'), {
                // toolbar: [ 'heading', '|', 'bold', 'italic', 'link' ]
            })
            .then(editor => {
                window.editor = editor;
            })
            .catch(err => {
                console.error(err.stack);
            });
    </script>

    <style>
        .ck-editor__editable {
            min-height: 200px;
        }
    </style>
}
